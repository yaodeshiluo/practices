#!/usr/bin/env python
# -*- coding: utf-8 -*-


#使用__slots__:
class Student(object):
    pass

s=Student()
s.name='Michael' #动态给实例绑定一个属性
print s.name

#给实例绑定一个方法：利用MethodType动态给class加上功能
def set_age(self,age):
    self.age = age  #测试这里把self换成p，下面的运行仍然成立。

def set_age(self):
    self.age = 18 #将这个方法绑定给实例后，s.set_age(25)会报错为TypeError: set_age() takes exactly 1 argument (2 given)！

def print_age(self): #这个方法也能绑定给实例
    print 'age: 25'

set_age('Michael',89) #AttributeError: 'str' object has no attribute 'age'

from types import MethodType
s.set_age=MethodType(set_age,s,Student)
s.print_age=MethodType(print_age,s,Student)
s.set_age(25)
s.age

#但是，给一个实例绑定的方法，对另一个实例是不起作用的：
s2 = Student()
s2.set_age(25) #AttributeError: 'Student' object has no attribute 'set_age'

#给所有实例绑定方法。
def set_score(self,score):
    self.score = score

Student.set_score = MethodType(set_score,None,Student)
Student.city = 'Beijing' #亲测，可以给所有实例加上属性！

#动态加上属性和方法见上所示。用__slots__可以进行一定限制。
class Student(object):
    __slots__ = ('name', 'age') #注意格式，tuple里加属性名称

s = Student()
s.name = 'Job'
s.age = 23
s.score = 99 #报错

#__slot__对继承的子类不起作用！！！！
class GraduateStudent(Student):
    pass

g = GraduateStudent()
g.score = 99 #不会报错。
#在子类中也定义__slots__，这样，子类允许定义的属性就是自身的__slots__加上父类的__slots__
class GraduateStudent(Student):
    __slots__ = ('name') #含有'name' 'age'两个属性。


#限制score的范围
class Student(object):
    def __init__(self, name, age, score): #四个参数，a = Student('Michael', 25, 99)。如果直接用__slot__的话，就可以直接s = Student()
        self.name = name
        self.age = age
        self.score = score
    def get_score(self): #从颜色来看，__init__不像是一般函数，下面的函数名都是红色。
        return self.score
    def set_score(self, value):
        if not isinstance(value, int):
            raise ValueError('score must be an integer')
        if value < 0 or value > 100:
            raise ValueError('score must between 0 and 100')
        self.score = value #改用else其实效果一样。

s = Student() #报错，TypeError: __init__() takes exactly 4 arguments (1 given)
a = Student('Michael', 25, 99)

#@property可以将一个getter方法变成属性，方法  到  属性。参考上面。一个getter方法，一个setter方法。
class Student(object):
    def __init__(self, name, age, score): #四个参数，a = Student('Michael', 25, 99)。如果直接用__slot__的话，就可以直接s = Student()
        self.name = name
        self.age = age
        self.score = score
    @property
    def fenshu(self): #成功将一个函数变成属性！！！！！但fenshu.setter没成功，会报错。
        return self.score
    @property #如果只有这一行，没有@score.setter，score将成只读性性，上面的self.score会报错， a = Student('Michael', 25, 99)也会报错说无法set ttribute.
    def score(self):
       return self.score
    @score.setter #有了这一行，score就不是只读属性，是可读写属性。
    def score(self,value):
        if not isinstance(value, int):
            raise ValueError('score must be an integer')
        if value < 0 or value > 100:
            raise ValueError('score must between 0 and 100')
        self._score = value #这一行必须是self._score,而不能是self.score，不然递归错误！！！！！！？？？？？？RuntimeError: maximum recursion depth exceeded

a = Student('Michael', 23, 99)

class Gs(object):

    @property
    def score(self):
        return self._score #score前没有下划线,d.score会报递归错误！！！！？？？？另外，有下划线，则说无 'Gs' object has no attribute '_score'

    @score.setter #即使这个类里面没有定义score属性，但输入d.score = 999会报错，输入d.score = 99后，d.score 结果为99
    def score(self, value):
        if not isinstance(value, int):
            raise ValueError('score must be an integer!')
        if value < 0 or value > 100:
            raise ValueError('score must between 0 ~ 100!')
        self._score = value #如果这里的score前没有下划线，上面的_score会说pycharm Unresolved attribute reference '_score' for class 'Gs'可见这两部分相互依存。另外输入d.score = 99 后会报递归错误！！！！？？？

d = Gs()












