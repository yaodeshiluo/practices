#!/usr/bin/env python
# -*- coding: utf-8 -*-

#Built-in Functions 内置函数
#help(abs)等

cmp(1,2) #两个参数，-1
cmp(1,1) #0
cmp(2,1) #1

#数据类型转换
int()
float()
unicode()
bool() #非空，非零，非None，则True？
unicode()

a=abs
a(-1) # 1

#定义函数，值用return返回。一旦执行到return时，函数就执行完毕，并将结果返回
def my_abs(x):
    if x >= 0:
        return None # return None可以简写为return。
    else:
        return -x

def my_abs(x):
    if x >= 0:
        print x
    else:
        print -x # 亲测能用print
my_abs('A') #'A',因为'A'>=0为Ture！！！！
abs('A') #报错

def my_abs(x):
    if not isinstance(x,(int, float)):
        raise TypeError('bad operand type') # TypeError已定义，括号内容为说明，删了也不造成语法错误
    if x >=0:
        return x
    else:
        return -x
#这一行不能马上接代码，会报错。要空一行。

def my_abs(x):
    if x >= 0:
        pass
    else:
        pass # 缺少了pass，代码运行就会有语法错误。

#定义一个什么事也不做的空函数
def nop():
    pass

import math 
math.pi # 3.141592653589793
math.sin(math.pi/6)

#返回多个值的函数
import math
def move(x,y,step,angle=0): #:不能少
    nx=x+step*math.cos(angle)
    ny=y-step*math.sin(angle)
    return nx,ny 


x, y = move(100, 100, 60, math.pi / 6) #返回值是一个tuple
    

x,y=(1,3,4) #报错
x,y=(1,3)


#定义x的n次方
def power(x,n=2): # 默认参数为2
    s=1
    while n>0:
        n=n-1
        s=s*x
    return s # 这一行上面可空行。下面不能马上接代码，会报错，需空行。

#对比上面。要有空一行。且不能用return。
x=3
n=3
s=1
while n>0:
    n=n-1
    s=s*x

print s # 上面空一行。

#注册函数
def enroll(name,gender,age='6',city='Beijing'):
    print 'name:',name
    print 'gender:',gender
    print 'age:',age
    print 'city:',city

#默认参数为可变对象，则会出现大坑
def add_end(L=[]):
    L.append('END')
    return L

add_end() # ['END']
add_end() # ['END','END']

#修改
def add_end(L=None):
    if L is None: #is不能换成=，会报错；但可换成==
        L=[] # 下面不能空一行，亲测报错
    L.append('END')
    return L # 这里上面可以空一行，不会报错。用print也行，亲测。区别？？？

#可变参数
def calc(numbers):
    sum=0
    for n in numbers:
        sum=sum+n*n
    return sum # numbers 只能为list或者tuple。calc(1,3) calc(1) 报错

#numbers变为*numbers
def calc(*numbers):
    sum = 0
    for n in numbers: # 注意是numbers,而不是*numbers.
        sum = sum + n * n 
    return sum  # calc([1,2,3])会报错。calc(*[1,2,3]) calc(*(1,2,3))则正常。加*导入list或tuple
    
#关键字参数 **kw
def person(name,age,**kw):
    print 'name:',name,'age:',age,'other:',kw #注意不是**kw！！！**kw和kw的区别！！

person('Michael',8) #上一行如果有四个空格，和这一行一块复制过去运行则会报错。
#name: Michael age: 8 other: {} **kw没有输入，则默认为{}

#**kw
kw = {'city': 'Beijing', 'job': 'Engineer'}
person('Jack', 24, city=kw['city'], job=kw['job'])
person('Bob', 35, city='Beijing') # name: Bob age: 35 other: {'city': 'Beijing'},city='Beijing'不能写成city=Beijing。
person('Jack', 24, **kw)
person('Jack', 24, kw) #报错！！
person('Jack', 24, {}) #报错！！


def func(a,b,c=0, *args, **kw): # 简写a,b,c= 
    print 'a=',a, 'b=',b, 'c=',c, 'args=',args, 'kw=',kw

func(0,0,1,(1,2,3),f=9) # f=9改成c=9，报错。
args = (1, 2, 3, 4)
kw = {'x': 99}
func(*args, **kw) # 注意结果为a = 1 b = 2 c = 3 args = (4,) kw = {'x': 99}！！
func(1,2,3,4,5,babe='Bob') #按顺序赋予各个参数了

#递归函数
def fact(n):
    sum=1 
    while n>=1:
        sum = sum * n 
        n=n-1
    return sum  #所有的递归函数都可以写成循环的方式，但循环的逻辑不如递归清晰。

#任何递归函数都存在栈溢出的问题
def fact(n):
    if n==1: # if引出初始值，注意==
        return 1  #初始值
    return n*fact(n-1) #return后接递归数学式。


def fact(n):
    return fact_iter(n, 1)

def fact_iter(num, product):
    if num == 1:
        return product #初始值的定义是个关键。return后接的值即为初始值。
    return fact_iter(num - 1, num * product) 


L = []
n=1 # 初始值
while n<=99: #条件限制
    L.append(n)
    n=n+2 #递归公式

print L

#切片
L = ['Michael', 'Sarah', 'Tracy', 'Bob', 'Jack']
#L[0:3]相当于以下
r=[]
for i in range(3):
    r.append(L[i])

print r

#L[1:3], L[0:3], L[:3]
#L[-2:], L[-2:-1], L[-1], 
#L[:10:2]
#L[::2]
#L[:]
(0, 1, 2, 3, 4, 5)[:3] #tuple也能用切片，结果仍为tuple
'ABCDEFG'[:3]  #字符也能切片。'ABC'
u'ABCDEFG'[:3] #字符也能切片。u'ABC'

#可迭代对象有dict，字符串，list, tuple, [(1, 1), (2, 4), (3, 9)]等
d = {'a': 1, 'b': 2, 'c': 3}
for key in d: # 还可以写成for key in d.iterkeys(): 记得写上()!!!
    print key

for value in d.itervalues():
    print value

for k,v in d.iteritems():
    print k,v

for ch in 'ABC':
    print ch 

for x,y in [(1, 1), (2, 4), (3, 9)]:
    print x,y 


#判断是否可迭代，iterable
from collections import Iterable #注意开头大写
isinstance('abc',Iterable)
isinstance([1,2,3],Iterable)
isinstance(123,Iterable) #False

#enumerate函数
enumerate(['A','B','C'])
for i,value in enumerate(['A','B','C']):
    print i+1,value

#列表生成器
range(1,11) #是1到10！！！
L=[]
for i in range(1,11):
    L.append(i*i)

print L


#几种列表生成器
[x*x for x in range(1,11)] #列表生成式只要一行代码

[m+n for m in 'ABC' for n in 'XYZ'] #字符可以相加。这里最终得到的list里有9个元素！！！！

import os # 导入os模块，模块的概念后面讲到
[d for d in os.listdir('.')] # os.listdir可以列出文件和目录

d = {'x': 'A', 'y': 'B', 'z': 'C' }
[k+'='+v for k,v in d.iteritems()] #注意+号在这里的用法
[k,'=',v for k in d.iterkeys(),for v in d.itervalues()] #不能用","!!
[k+'='+v for k in d.iterkeys(),for v in d.itervalues()] #两个for之间没有”,”，所以这里报错
[k+'='+v for k in d.iterkeys() for v in d.itervalues()] #正确
[k+'  =  '+v for k,v in d.iteritems()] # ''内空格有效
#注意以上列表最终的元素个数！！！

L = ['Hello', 'World', 'IBM', 'Apple'] 
[s.lower() for s in L] # 注意s.lower() s.upper() 

#这里注意if语句的位置。
L = ['Hello', 'World', 18, 'Apple', None] 
[s.lower() for s in L] #AttributeError: 'int' object has no attribute 'lower'
[s.lower() for s in L if isinstance(s,str)] #加入if语句，注意if语句的位置。

#in语句，返回值为bool值。如'A' in 'ABC', 'D' not in 'ABC'等

#找出质数

def prime_numbers(n): #找出n以内的所有质数
    noprime_numbers = []
    for i in range(2, n/2):
        for j in range(i*2, n+1, i):
            noprime_numbers.append(j)
    prime_numbers = [] #这一行空行了的话，会报错，函数内目前就发现return前可以有空行。
    for x in range(2, n+1):
        if x not in noprime_numbers:
            prime_numbers.append(x)
    return prime_numbers #这里的return前也不能空行。是不是函数内的if，for代码块后不能空行？

#列表生成器可由列表生成式得来。可迭代!!!!可用for in  
L = [x * x for x in range(10)]
g = (x * x for x in range(10))

#一般用for in 迭代。
for n in g:
    print n

#斐波拉契数列
def fib1(max): #小于max的斐波拉契数列
    a,b = 0,1
    while b<max:
        print b 
        a,b = b, a+b

def fib2(max): #前max个斐波拉契数列
    n,a,b = 0,0,1
    while n<max:
        print b #这里的print不能改为return，函数里的代码到return就返回了。
        a,b=b,a+b 
        n=n+1 

#列表生成器：把上面的两个函数里的print改为yield
#每次调用next()的时候执行，遇到yield语句返回
#再次执行时从上次返回的yield语句处继续执行。








